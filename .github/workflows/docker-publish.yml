name: Test and Publish Docker Containers

on:
  push:
    branches:
      - main

jobs:
  launch-containers:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker compose
      run: sudo apt-get install docker-compose

    - name: Start containers with Docker Compose
      run: sudo docker-compose up --build

  # Ahora vamos a lanzar tests Python que evaluan los endpoints desplegados en el contenedor
  # Lo primero es preparar el entorno de ejecución Python
  test-containers:
    runs-on: ubuntu-latest

    steps:
    # Chequeos
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Dependencias necesarias para ejecutar los tests (el resto estarán en el contendor)
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests==2.25.1 pytest==6.2.5

    # Ejecutar pruebas (Esperamos un minuto de más para que le dé tiempo a los contenedores para inicializarse)
    - name: Run container tests
      env:
        PYTHONPATH: ${{ github.workspace }}  # Add modules to PYTHONPATH
      run: |
        sleep 60 &
        pytest tests/test_container.py

    # Detener los contenedores tras realizar los tests
    - name: Teardown containers
      run: docker-compose down --volumes

    #- name: Test API service
      #run: |
        #./test_api_container.sh
      # En vez de esto, llama a un pytest que lance tests a los endpoints del contenedor, y evalúa eso, sin más
      # Ni siquiera necesitas el contenedor de tests definido en el cluster de contenedores

    #- name: Teardown containers
      #run: docker-compose down --volumes

